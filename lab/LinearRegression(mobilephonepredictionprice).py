# -*- coding: utf-8 -*-
"""UAS(MobilePhonePredictionPrice).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xaeoRNwdy329l4F04wSAiudHCk99hoE-

# Pengenalan Data

Dalam data:
*   id: ID
*   battery_power: Energi total yang dapat disimpan baterai dalam satu waktu diukur dalam mAh
*   blue: Mempunyai Bluetooth atau tidak
*   clock_speed:kecepatan mikroprosesor mengeksekusi instruksi
*   dual_sim: Memiliki dukungan dual sim atau tidak
*   fc: Kamera depan mega piksel
*   four_g: Memdukung 4G atau tidak
*   int_memory: Memori Internal dala Gigabyte
*   m_dep: Kedalaman Seluler dalam cm
*   mobile_wt: Berat ponsel
*   n_cores: Jumlah inti prosesor
*   pc: Mega piksel Kamera Utama
*   px_height: Tinggi Resolusi Piksel
*   px_width: Lebar Resolusi Piksel
*   ram: Random Access Memory dalam satuan Megabytes
*   sc_h: Tinggi Layar ponsel dalam cm
*   sc_w: Lebar Layar ponsel dalam cm
*   talk_time: waktu terlama satu kali pengisian baterai akan bertahan saat Anda berada
*   three_g: Mendukung 3G atau tidak
*   touch_screen: Memiliki layar sentuh atau tidak
*   wifi: Ada wifi atau tidak
*   price_range: Harga Ponsel

# Identifikasi Dataset

Pada bagian ini adalah identifikasi dataset ke dalam kode menggunakkan libarary python.
"""
# In[ ]:

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline

# In[ ]:
dataset=pd.read_csv('train.csv')

dataset.head()

# In[ ]:
"""Selanjutnya menganalisis dataset yang telah diimport seperti berapa banyak data yang dimasukkan pada setiap atribut."""
dataset.info()


# In[ ]:
"""Setelah itu melakukan perhitungan data seperti rata-rata, nilai masksimal, minimal dan lainnya."""
dataset.describe()


# In[ ]:
"""# Visualisasi dan Analisis Data

Pada bagian ini akan divisualisasi penyebab harga dipengaruhi oleh kapasitas RAM dalam Smart Phone.
"""

sns.pairplot(dataset,hue='price_range')

"""Dapat dilihat, pada setiap grafik diatas adalah perbandingan tiap data yang dapat mempengaruhi harga Smart Phone. Setelah itu dapat disimpulkan bahwa kapasitas RAM sangat mempengaruhi harga. Untuk lebih jelas sebagai berikut."""
# In[ ]:
sns.jointplot(x='ram',y='price_range',data=dataset,color='blue',kind='kde');


# In[ ]:
"""Untuk internal memory dengan harga adalah sebagai berikut."""
sns.pointplot(y="int_memory", x="price_range", data=dataset)


# In[ ]:
"""Perhitungan berapa banyak yang hanya support 3G."""
labels = ["3G-supported",'Not supported']
values=dataset['three_g'].value_counts().values

fig1, ax1 = plt.subplots()
ax1.pie(values, labels=labels, autopct='%1.1f%%',shadow=True,startangle=90)
plt.show()


# In[ ]:
"""Perhitungan berapa banyak yang support 4G."""
labels4g = ["4G-supported",'Not supported']
values4g = dataset['four_g'].value_counts().values
fig1, ax1 = plt.subplots()
ax1.pie(values4g, labels=labels4g, autopct='%1.1f%%',shadow=True,startangle=90)
plt.show()

# In[ ]:
"""Berikut jika kapasitas baterai mempengaruhi harga."""
sns.boxplot(x="price_range", y="battery_power", data=dataset)

# In[ ]:
"""Pada bagian ini akan dilakukan perhitungan untuk melihat berapa banyak ponsel yang memiliki kamera depan dan kamera belakang serta berapa resolusi kamera yang dimiliki."""
plt.figure(figsize=(10,6))
dataset['fc'].hist(alpha=0.5,color='blue',label='Front camera')
dataset['pc'].hist(alpha=0.5,color='red',label='Primary camera')
plt.legend()
plt.xlabel('MegaPixels')


# In[ ]:
"""Pada bagian ini akan dilihat seberapa pengaruh berat ponsel dengan harga ponsel."""
sns.jointplot(x='mobile_wt',y='price_range',data=dataset,kind='kde');

# In[ ]:
"""Pada bagian ini akan dilakukan analisis seberapa pengaruh harga ponsel terhadap daya tahan waktu terlama satu kali pengisian baterai akan bertahan kapanpun Anda berada (Talk Time)"""
sns.pointplot(y="talk_time", x="price_range", data=dataset)

# In[ ]:
"""# Pembuatan Array X & Y

Pada bagian ini akan dilakukan penyusuaian data yang akan daigunakan dalam pembuatan model prediksi.
"""
X=dataset.drop('price_range',axis=1)

y=dataset['price_range']

# In[ ]:
"""Selanjutnya adalah pemisahan data pada dataset. Pada bagian ini akan dibuat sebuah data tes yang berasal dari data training dan diambil secara acak."""
from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=101)
train_test_split
# In[ ]:
X_test
# In[ ]:
y_test

# In[ ]:
"""# Pembuatan dan Pelatihan Model Linear Regresi

Pada bagian ini akan dilakukan pembuatan model prediksi harga ponsel menggunakan Model Linear Regresi, serta akan dilakukan pelatihan pada model yang dibuat.
"""
from sklearn.linear_model import LinearRegression
lm = LinearRegression()

lm.fit(X_train,y_train)

lm.score(X_test,y_test)

"""Pada pelatihan model yang dibuat dapat dilihat model tersebut memiliki score sebesar 0,913 yang artinya cukup bagus karena mendekati angka 1.

"""
# In[ ]:
"""**Pengujian atau Tes Model Menggunakan Data Training**

Pada bagian ini Model akan diuji untuk memprediksi harga ponsel menggunakan data yang berasal dari data training namun diambil secara acak sebanyak 660 data.
"""
y_pred=lm.predict(X_test)
y_pred

plt.scatter(y_test,y_pred)
plt.xlabel('Data Asli')
plt.ylabel('Hasil Prediksi')

# In[ ]:
plt.plot(y_test,y_pred)
plt.xlabel('Data Asli')
plt.ylabel('Hasil Prediksi')

"""Pada grafik di atas dapat disimpulkan bahwa model yang dibuat cukup bagus karena selisih antara data asli dan hasil prediksi memiliki selesih error yang sedikit.
"""
# In[ ]:
"""# Evaluasi Linear Regression dengan Coefficient of Determination atau R-squered

Pada bagian ini akan dilakukan evaluasi terhadap model yang telah dibuat menggunakan metode R-squered.
"""
from sklearn.metrics import r2_score

r_squared = r2_score(y_test, y_pred)

print(f'R-squered: {r_squared}')

# In[ ]:
"""# Perhitungan Error MAE, SSE, SSR, dan SST

Pada bagian ini akan dihitung berapa MAE (*Mean Absolute Error*), SSE (*Error Sum of Squares*), SSR (*Regression Sum of Squares*), dan SST (*Total Sum of Squares*).
"""
Harga_Asli = np.array(y_test)
Harga_pred = np.array(y_pred)

sum = np.sum(Harga_Asli)

err = (Harga_pred - Harga_Asli)

SSE = (Harga_Asli - Harga_pred)**2

SSR = (Harga_pred - sum)**2
# In[ ]:
def jumlah_total(daftar_err):
    z=0;
    x = daftar_err
    jml = len(x)

    for i in range(jml):
        y = x[i]
        z+=y
   
    return z

MEA = abs(jumlah_total(err))/len(err)
sse = jumlah_total(SSE)
ssr = jumlah_total(SSR)
print(f'Mean Absolute Error : {MEA}')
print(f'Error Sum of Squares : {sse}')
print(f'Regression Sum of Squares : {ssr}')
print(f'Total Sum of Squares : {ssr + sse}')

# In[ ]:
"""# Tes Model

Pada bagian ini akan dilakukan tes pada model yang telah dibuat dengan data tes yang telah disiapkan.
"""
pred=pd.read_csv("test.csv")

pred.head()

"""Pada hasil di atas adalah data tes yang telah di identifikasi dan akan dilakukan predikisi harga."""
# In[ ]:
pred=pred.drop('id',axis=1)
pred
# In[ ]:
price_pred=lm.predict(pred)
price_pred
# %%
